package com.cinnamon.system;

import org.lwjgl.glfw.GLFW;

import static com.cinnamon.system.KeyEvent.Key.*;

/**
 * <p>
 *     KeyEvents represent {@link InputEvent}s generated by keyboard interaction and are described by the
 *     {@link Key} that performed the {@link InputEvent.Action}. Unlike {@link MouseEvent}s, KeyEvents do not
 *     support {@link InputEvent.Action#SCROLL_FORWARD} or {@link InputEvent.Action#SCROLL_BACKWARD}.
 * </p>
 */
public final class KeyEvent extends InputEvent
{
    /**
     * <p>Number of supported keyboard keys.</p>
     */
    public static final int SUPPORTED_KEYS = 79;

    /**
     * <p>
     *     Keyboard key constants for describing {@link KeyEvent}s.
     * </p>
     */
    public enum Key
    {
        // Numerical constants (10)
        KEY_0,
        KEY_1,
        KEY_2,
        KEY_3,
        KEY_4,
        KEY_5,
        KEY_6,
        KEY_7,
        KEY_8,
        KEY_9,

        // Punctuation constants (11)
        KEY_GRAVE,
        KEY_MINUS,
        KEY_EQUAL,
        KEY_OPEN_BRACKET,
        KEY_CLOSE_BRACKET,
        KEY_BACK_SLASH,
        KEY_SEMICOLON,
        KEY_APOSTROPHE,
        KEY_COMMA,
        KEY_PERIOD,
        KEY_FORWARD_SLASH,

        // Auxiliary constants (20)
        KEY_ESCAPE,
        KEY_ENTER,
        KEY_SPACE,
        KEY_BACKSPACE,
        KEY_TAB,
        KEY_CAPS_LOCK,
        KEY_LEFT_CTRL,
        KEY_LEFT_SHIFT,
        KEY_LEFT_ALT,
        KEY_RIGHT_CTRL,
        KEY_RIGHT_SHIFT,
        KEY_RIGHT_ALT,
        KEY_RIGHT,
        KEY_DOWN,
        KEY_LEFT,
        KEY_UP,
        KEY_LEFT_SUPER,
        KEY_RIGHT_SUPER,
        KEY_PAGE_UP,
        KEY_PAGE_DOWN,

        // Function constants (12)
        KEY_F1,
        KEY_F2,
        KEY_F3,
        KEY_F4,
        KEY_F5,
        KEY_F6,
        KEY_F7,
        KEY_F8,
        KEY_F9,
        KEY_F10,
        KEY_F11,
        KEY_F12,

        // English alphabet constants (26)
        KEY_A,
        KEY_B,
        KEY_C,
        KEY_D,
        KEY_E,
        KEY_F,
        KEY_G,
        KEY_H,
        KEY_I,
        KEY_J,
        KEY_K,
        KEY_L,
        KEY_M,
        KEY_N,
        KEY_O,
        KEY_P,
        KEY_Q,
        KEY_R,
        KEY_S,
        KEY_T,
        KEY_U,
        KEY_V,
        KEY_W,
        KEY_X,
        KEY_Y,
        KEY_Z
    }

    // KeyEvent description
    private Key mKey;

    /**
     * <p>Constructs a KeyEvent described by a {@link Key} and the {@link Action} taken on the key.</p>
     *
     * @param key key constant such as {@link Key#KEY_SPACE}.
     * @param action Action such as {@link Action#PRESS}.
     */
    public KeyEvent(Key key, InputEvent.Action action)
    {
        super(action);
        mKey = key;
    }

    /**
     * <p>Constructs a KeyEvent by copying another.</p>
     *
     * <p>While the new KeyEvent will have the same {@link Key} and {@link Action}, the value returned by
     * {@link #getTime()} will reflect the time of the newly constructed.</p>
     *
     * @param event KeyEvent to copy.
     */
    public KeyEvent(KeyEvent event)
    {
        super(event.getAction());
        mKey = event.mKey;
    }

    /**
     * <p>Changes the {@link Key} and {@link Action}.</p>
     *
     * <p>Timestamp is not copied but updated to the time of this method's execution.</p>
     *
     * @param key key constant such as {@link Key#KEY_K}.
     * @param action either {@link Action#PRESS}, {@link Action#RELEASE}, or {@link Action#REPEAT}.
     */
    public void update(Key key, Action action)
    {
        mKey = key;
        setAction(action);
        timestamp();
    }

    /**
     * <p>Gets the {@link Key} describing the KeyEvent.</p>
     *
     * @return a key constant such as {@link Key#KEY_A}.
     */
    public Key getKey()
    {
        return mKey;
    }

    /**
     * <p>Checks whether or not the KeyEvent is described by a specified {@link Key}.</p>
     *
     * @param key key constant such as {@link Key#KEY_H}.
     * @return true if the key describes the KeyEvent.
     */
    public boolean isKey(Key key)
    {
        return mKey == key;
    }

    @Override
    protected void handle(EventDispatcher distributor) {
        distributor.process(this);
    }

    /**
     * <p>Gets the {@link Key} constant form of a GLFW digit key constant.</p>
     *
     * @param system system constant.
     * @return Key constant, or null if the system constant is unrecognized.
     */
    static Key systemDigitsToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_0:
                return KEY_0;
            case GLFW.GLFW_KEY_1:
                return KEY_1;
            case GLFW.GLFW_KEY_2:
                return KEY_2;
            case GLFW.GLFW_KEY_3:
                return KEY_3;
            case GLFW.GLFW_KEY_4:
                return KEY_4;
            case GLFW.GLFW_KEY_5:
                return KEY_5;
            case GLFW.GLFW_KEY_6:
                return KEY_6;
            case GLFW.GLFW_KEY_7:
                return KEY_7;
            case GLFW.GLFW_KEY_8:
                return KEY_8;
            case GLFW.GLFW_KEY_9:
                return KEY_9;
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link Key} constant form of a GLFW punctuation key constant.</p>
     *
     * @param system system constant.
     * @return Key constant, or null if the system constant is unrecognized.
     */
    static Key systemPunctuationToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_GRAVE_ACCENT:
                return KEY_GRAVE;
            case GLFW.GLFW_KEY_MINUS:
                return KEY_MINUS;
            case GLFW.GLFW_KEY_EQUAL:
                return KEY_EQUAL;
            case GLFW.GLFW_KEY_LEFT_BRACKET:
                return KEY_OPEN_BRACKET;
            case GLFW.GLFW_KEY_RIGHT_BRACKET:
                return KEY_CLOSE_BRACKET;
            case GLFW.GLFW_KEY_BACKSLASH:
                return KEY_BACK_SLASH;
            case GLFW.GLFW_KEY_SEMICOLON:
                return KEY_SEMICOLON;
            case GLFW.GLFW_KEY_APOSTROPHE:
                return KEY_APOSTROPHE;
            case GLFW.GLFW_KEY_COMMA:
                return KEY_COMMA;
            case GLFW.GLFW_KEY_PERIOD:
                return KEY_PERIOD;
            case GLFW.GLFW_KEY_SLASH:
                return KEY_FORWARD_SLASH;
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link Key} constant form of a GLFW auxiliary key constant.</p>
     *
     * @param system system constant.
     * @return Key constant, or null if the system constant is unrecognized.
     */
    static Key systemAuxiliaryToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_ESCAPE:
                return KEY_ESCAPE;
            case GLFW.GLFW_KEY_ENTER:
                return KEY_ENTER;
            case GLFW.GLFW_KEY_SPACE:
                return KEY_SPACE;
            case GLFW.GLFW_KEY_BACKSPACE:
                return KEY_BACKSPACE;

            case GLFW.GLFW_KEY_TAB:
                return KEY_TAB;
            case GLFW.GLFW_KEY_CAPS_LOCK:
                return KEY_CAPS_LOCK;

            case GLFW.GLFW_KEY_LEFT_CONTROL:
                return KEY_LEFT_CTRL;
            case GLFW.GLFW_KEY_LEFT_SHIFT:
                return KEY_LEFT_SHIFT;
            case GLFW.GLFW_KEY_LEFT_ALT:
                return KEY_LEFT_ALT;

            case GLFW.GLFW_KEY_RIGHT_CONTROL:
                return KEY_RIGHT_CTRL;
            case GLFW.GLFW_KEY_RIGHT_SHIFT:
                return KEY_RIGHT_SHIFT;
            case GLFW.GLFW_KEY_RIGHT_ALT:
                return KEY_RIGHT_ALT;

            case GLFW.GLFW_KEY_RIGHT:
                return KEY_RIGHT;
            case GLFW.GLFW_KEY_DOWN:
                return KEY_DOWN;
            case GLFW.GLFW_KEY_LEFT:
                return KEY_LEFT;
            case GLFW.GLFW_KEY_UP:
                return KEY_UP;

            case GLFW.GLFW_KEY_LEFT_SUPER:
                return KEY_LEFT_SUPER;
            case GLFW.GLFW_KEY_RIGHT_SUPER:
                return KEY_RIGHT_SUPER;
            case GLFW.GLFW_KEY_PAGE_UP:
                return KEY_PAGE_UP;
            case GLFW.GLFW_KEY_PAGE_DOWN:
                return KEY_PAGE_DOWN;
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link Key} constant form of a GLFW function key constant.</p>
     *
     * @param system system constant.
     * @return Key constant, or null if the system constant is unrecognized.
     */
    static Key systemFunctionToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_F1:
                return KEY_F1;
            case GLFW.GLFW_KEY_F2:
                return KEY_F2;
            case GLFW.GLFW_KEY_F3:
                return KEY_F3;
            case GLFW.GLFW_KEY_F4:
                return KEY_F4;
            case GLFW.GLFW_KEY_F5:
                return KEY_F5;
            case GLFW.GLFW_KEY_F6:
                return KEY_F6;
            case GLFW.GLFW_KEY_F7:
                return KEY_F7;
            case GLFW.GLFW_KEY_F8:
                return KEY_F8;
            case GLFW.GLFW_KEY_F9:
                return KEY_F9;
            case GLFW.GLFW_KEY_F10:
                return KEY_F10;
            case GLFW.GLFW_KEY_F11:
                return KEY_F11;
            case GLFW.GLFW_KEY_F12:
                return KEY_F12;
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link Key} constant form of a GLFW alphabetic key constant.</p>
     *
     * @param system system constant.
     * @return Key constant, or null if the system constant is unrecognized.
     */
    static Key systemAlphabetToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_A:
                return KEY_A;
            case GLFW.GLFW_KEY_B:
                return KEY_B;
            case GLFW.GLFW_KEY_C:
                return KEY_C;
            case GLFW.GLFW_KEY_D:
                return KEY_D;
            case GLFW.GLFW_KEY_E:
                return KEY_E;
            case GLFW.GLFW_KEY_F:
                return KEY_F;
            case GLFW.GLFW_KEY_G:
                return KEY_G;
            case GLFW.GLFW_KEY_H:
                return KEY_H;
            case GLFW.GLFW_KEY_I:
                return KEY_I;
            case GLFW.GLFW_KEY_J:
                return KEY_J;
            case GLFW.GLFW_KEY_K:
                return KEY_K;
            case GLFW.GLFW_KEY_L:
                return KEY_L;
            case GLFW.GLFW_KEY_M:
                return KEY_M;
            case GLFW.GLFW_KEY_N:
                return KEY_N;
            case GLFW.GLFW_KEY_O:
                return KEY_O;
            case GLFW.GLFW_KEY_P:
                return KEY_P;
            case GLFW.GLFW_KEY_Q:
                return KEY_Q;
            case GLFW.GLFW_KEY_R:
                return KEY_R;
            case GLFW.GLFW_KEY_S:
                return KEY_S;
            case GLFW.GLFW_KEY_T:
                return KEY_T;
            case GLFW.GLFW_KEY_U:
                return KEY_U;
            case GLFW.GLFW_KEY_V:
                return KEY_V;
            case GLFW.GLFW_KEY_W:
                return KEY_W;
            case GLFW.GLFW_KEY_X:
                return KEY_X;
            case GLFW.GLFW_KEY_Y:
                return KEY_Y;
            case GLFW.GLFW_KEY_Z:
                return KEY_Z;
            default: return null;
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException("Use the copy constructor instead");
    }

    /**
     * <p>Gets the {@link String} equivalent of a given digit {@link Key}.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unrecognized.
     */
    private static String digitsToString(Key key)
    {
        switch (key) {
            case KEY_0:
                return "0";
            case KEY_1:
                return "1";
            case KEY_2:
                return "2";
            case KEY_3:
                return "3";
            case KEY_4:
                return "4";
            case KEY_5:
                return "5";
            case KEY_6:
                return "6";
            case KEY_7:
                return "7";
            case KEY_8:
                return "8";
            case KEY_9:
                return "9";
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link String} equivalent of a given punctuation {@link Key}.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unrecognized.
     */
    private static String punctuationToString(Key key)
    {
        switch (key) {
            case KEY_GRAVE:
                return "`";
            case KEY_MINUS:
                return "-";
            case KEY_EQUAL:
                return "=";
            case KEY_OPEN_BRACKET:
                return "[";
            case KEY_CLOSE_BRACKET:
                return "]";
            case KEY_BACK_SLASH:
                return "\\";
            case KEY_SEMICOLON:
                return ";";
            case KEY_APOSTROPHE:
                return "'";
            case KEY_COMMA:
                return ",";
            case KEY_PERIOD:
                return ".";
            case KEY_FORWARD_SLASH:
                return "/";
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link String} equivalent of a given auxiliary {@link Key}.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unrecognized.
     */
    private static String auxiliaryToString(Key key)
    {
        switch (key) {
            case KEY_ESCAPE:
                return "escape";
            case KEY_ENTER:
                return "enter";
            case KEY_SPACE:
                return "space";
            case KEY_BACKSPACE:
                return "backspace";
            case KEY_TAB:
                return "tab";
            case KEY_CAPS_LOCK:
                return "caps_lock";
            case KEY_LEFT_CTRL:
                return "left_ctrl";
            case KEY_LEFT_SHIFT:
                return "left_shift";
            case KEY_LEFT_ALT:
                return "left_alt";
            case KEY_RIGHT_CTRL:
                return "right_ctrl";
            case KEY_RIGHT_SHIFT:
                return "right_shift";
            case KEY_RIGHT_ALT:
                return "right_alt";
            case KEY_RIGHT:
                return "right";
            case KEY_DOWN:
                return "down";
            case KEY_LEFT:
                return "left";
            case KEY_UP:
                return "up";
            case KEY_LEFT_SUPER:
                return "left_super";
            case KEY_RIGHT_SUPER:
                return "right_super";
            case KEY_PAGE_UP:
                return "page up";
            case KEY_PAGE_DOWN:
                return "page down";
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link String} equivalent of a given function {@link Key}.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unrecognized.
     */
    private static String functionToString(Key key)
    {
        switch (key) {
            case KEY_F1:
                return "F1";
            case KEY_F2:
                return "F2";
            case KEY_F3:
                return "F3";
            case KEY_F4:
                return "F4";
            case KEY_F5:
                return "F5";
            case KEY_F6:
                return "F6";
            case KEY_F7:
                return "F7";
            case KEY_F8:
                return "F8";
            case KEY_F9:
                return "F9";
            case KEY_F10:
                return "F10";
            case KEY_F11:
                return "F11";
            case KEY_F12:
                return "F12";
            default: return null;
        }
    }

    /**
     * <p>Gets the {@link String} equivalent of a given alphabetic {@link Key}.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unrecognized.
     */
    private static String alphabetToString(Key key)
    {
        switch (key) {
            case KEY_A:
                return "A";
            case KEY_B:
                return "B";
            case KEY_C:
                return "C";
            case KEY_D:
                return "D";
            case KEY_E:
                return "E";
            case KEY_F:
                return "F";
            case KEY_G:
                return "G";
            case KEY_H:
                return "H";
            case KEY_I:
                return "I";
            case KEY_J:
                return "J";
            case KEY_K:
                return "K";
            case KEY_L:
                return "L";
            case KEY_M:
                return "M";
            case KEY_N:
                return "N";
            case KEY_O:
                return "O";
            case KEY_P:
                return "P";
            case KEY_Q:
                return "Q";
            case KEY_R:
                return "R";
            case KEY_S:
                return "S";
            case KEY_T:
                return "T";
            case KEY_U:
                return "U";
            case KEY_V:
                return "V";
            case KEY_W:
                return "W";
            case KEY_X:
                return "X";
            case KEY_Y:
                return "Y";
            case KEY_Z:
                return "Z";
            default: return null;
        }
    }
}

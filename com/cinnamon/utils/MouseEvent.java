package com.cinnamon.utils;

/**
 * <p>
 *     MouseEvents represent {@link Event}s generated by mouse interaction.
 *     These kind of Events are categorized as
 *     {@link Event.Type#MOUSE} and whose
 *     {@link Event.Action} is either
 *     {@link Event.Action#PRESS}, {@link Event.Action#RELEASE},
 *     {@link Event.Action#REPEAT, {@link Event.Action#SCROLL_FORWARD}, or
 *     {@link Event.Action#SCROLL_BACKWARD}}.
 * </p>
 *
 *
 */
public class MouseEvent extends Event
{
    /**
     * <p>Maximum number of supported mouse buttons.</p>
     */
    public static final int BUTTON_COUNT = 3;

    /**
     * <p>Left mouse button.</p>
     */
    public static final int BUTTON_LEFT = 0;

    /**
     * <p>Right mouse button.</p>
     */
    public static final int BUTTON_RIGHT = 1;

    /**
     * <p>Middle mouse button.</p>
     */
    public static final int BUTTON_MIDDLE = 2;

    // Left, right, or middle button
    private int mButton;

    // Screen space coordinates of event
    private float mX;
    private float mY;

    /**
     * <p>Constructs a MouseEvent described by a mouse button, its performed
     * action, and the location of the Event in screen space.</p>
     *
     * @param button either {@link #BUTTON_LEFT}, {@link #BUTTON_RIGHT}, or
     * {@link #BUTTON_MIDDLE}.
     * @param action action constant such as
     * {@link com.cinnamon.utils.Event.Action#PRESS}.
     * @param x x location.
     * @param y y location.
     */
    public MouseEvent(int button, Action action, float x, float y)
    {
        super(Type.MOUSE, action);

        mButton = button;
        mX = x;
        mY = y;
    }

    /**
     * <p>Constructs a MouseEvent based off of another MouseEvent.</p>
     *
     * <p>The only difference between the constructed MouseEvent and its
     * reference is that calling {@link #getTime()} returns the copy's
     * construction time.</p>
     *
     * @param event MouseEvent to copy.
     */
    public MouseEvent(MouseEvent event)
    {
        super(Type.MOUSE, event.getAction());
        mButton = event.mButton;
        mX = event.mX;
        mY = event.mY;
    }

    /**
     * <p>Changes the button, x and y coordinates, and action.<p>
     *
     * <p>Timestamp is not copied but updated to the time of this method's
     * execution.</p>
     *
     * @param button either {@link #BUTTON_LEFT}, {@link #BUTTON_RIGHT}, or
     * {@link #BUTTON_MIDDLE}.
     * @param action either {@link Action#PRESS}, {@link Action#RELEASE},
     * {@link Action#SCROLL_FORWARD}, or {@link Action#SCROLL_BACKWARD}.
     */
    public void update(int button, Action action, float x, float y)
    {
        super.update(Type.MOUSE, action);
        mButton = button;
        mX = x;
        mY = y;
    }

    /**
     * <p>Gets the mouse button describing the MouseEvent.</p>
     *
     * @return either {@link #BUTTON_LEFT}, {@link #BUTTON_RIGHT}, or
     * {@link #BUTTON_MIDDLE}.
     */
    public final int getButton()
    {
        return mButton;
    }

    /**
     * <p>Checks whether or not the MouseEvent is described by a specified
     * button.</p>
     *
     * @param button either {@link #BUTTON_LEFT}, {@link #BUTTON_RIGHT}, or
     * {@link #BUTTON_MIDDLE}.
     * @return true if the button describes the MouseEvent.
     * @see #getButton()
     */
    public final boolean isButton(int button)
    {
        return mButton == button;
    }

    /**
     * <p>Gets the x position in screen coordinates.</p>
     *
     * @return x.
     */
    public final float getX()
    {
        return mX;
    }

    /**
     * <p>Gets the y position in screen coordinates.</p>
     *
     * @return y.
     */
    public final float getY()
    {
        return mY;
    }

    @Override
    public String toString()
    {
        String button = "L";
        if (mButton == BUTTON_RIGHT) {
            button = "R";
        } else if (mButton == BUTTON_MIDDLE) {
            button = "M";
        }

        return "[" + getType().name() + "," + getAction().name() + ","
                + button + ",(" + mX + "," + mY + ")]";
    }
}

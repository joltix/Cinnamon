package com.cinnamon.utils;

import org.lwjgl.glfw.GLFW;

/**
 * <p>
 *     KeyEvents represent {@link Event}s generated by keyboard
 *     interaction. These kind of Events are categorized as
 *     {@link Event.Type#KEYBOARD} and whose
 *     {@link Event.Action} is either
 *     {@link Event.Action#PRESS}, {@link Event.Action#RELEASE}, or
 *     {@link Event.Action#REPEAT}.
 * </p>
 *
 *
 */
public class KeyEvent extends Event
{
    // Number of supported keys
    public static final int KEY_COUNT = 75;

    // Numerical constants (10)
    public static final int KEY_0 = 0;
    public static final int KEY_1 = 1;
    public static final int KEY_2 = 2;
    public static final int KEY_3 = 3;
    public static final int KEY_4 = 4;
    public static final int KEY_5 = 5;
    public static final int KEY_6 = 6;
    public static final int KEY_7 = 7;
    public static final int KEY_8 = 8;
    public static final int KEY_9 = 9;

    // Punctuation constants (11)
    public static final int KEY_GRAVE = 10;
    public static final int KEY_MINUS = 11;
    public static final int KEY_EQUAL = 12;
    public static final int KEY_OPEN_BRACKET = 13;
    public static final int KEY_CLOSE_BRACKET = 14;
    public static final int KEY_BACK_SLASH = 15;
    public static final int KEY_SEMICOLON = 16;
    public static final int KEY_APOSTROPHE = 17;
    public static final int KEY_COMMA = 18;
    public static final int KEY_PERIOD = 19;
    public static final int KEY_FORWARD_SLASH = 20;

    // Auxiliary constants (16)
    public static final int KEY_ESCAPE = 21;
    public static final int KEY_ENTER = 22;
    public static final int KEY_SPACE = 23;
    public static final int KEY_BACKSPACE = 24;
    public static final int KEY_TAB = 25;
    public static final int KEY_CAPS_LOCK = 26;
    public static final int KEY_LEFT_CTRL = 27;
    public static final int KEY_LEFT_SHIFT = 28;
    public static final int KEY_LEFT_ALT = 29;
    public static final int KEY_RIGHT_CTRL = 30;
    public static final int KEY_RIGHT_SHIFT = 31;
    public static final int KEY_RIGHT_ALT = 32;
    public static final int KEY_RIGHT = 33;
    public static final int KEY_DOWN = 34;
    public static final int KEY_LEFT = 35;
    public static final int KEY_UP = 36;

    // Function constants (12)
    public static final int KEY_F1 = 37;
    public static final int KEY_F2 = 38;
    public static final int KEY_F3 = 39;
    public static final int KEY_F4 = 40;
    public static final int KEY_F5 = 41;
    public static final int KEY_F6 = 42;
    public static final int KEY_F7 = 43;
    public static final int KEY_F8 = 44;
    public static final int KEY_F9 = 45;
    public static final int KEY_F10 = 46;
    public static final int KEY_F11 = 47;
    public static final int KEY_F12 = 48;

    // English alphabet constants (26)
    public static final int KEY_A = 49;
    public static final int KEY_B = 50;
    public static final int KEY_C = 51;
    public static final int KEY_D = 52;
    public static final int KEY_E = 53;
    public static final int KEY_F = 54;
    public static final int KEY_G = 55;
    public static final int KEY_H = 56;
    public static final int KEY_I = 57;
    public static final int KEY_J = 58;
    public static final int KEY_K = 59;
    public static final int KEY_L = 60;
    public static final int KEY_M = 61;
    public static final int KEY_N = 62;
    public static final int KEY_O = 63;
    public static final int KEY_P = 64;
    public static final int KEY_Q = 65;
    public static final int KEY_R = 66;
    public static final int KEY_S = 67;
    public static final int KEY_T = 68;
    public static final int KEY_U = 69;
    public static final int KEY_V = 70;
    public static final int KEY_W = 71;
    public static final int KEY_X = 72;
    public static final int KEY_Y = 73;
    public static final int KEY_Z = 74;


    // KeyEvent description
    private int mKey;

    /**
     * <p>Constructs a KeyEvent described by a key and the interaction of
     * the key.</p>
     *
     * @param key key constant such as {@link #KEY_M}.
     * @param action interaction such as {@link Action#PRESS}.
     */
    public KeyEvent(int key, Action action)
    {
        super(Type.KEYBOARD, action);
        mKey = key;
    }

    /**
     * <p>Constructs a KeyEvent based off of another KeyEvent.</p>
     *
     * <p>The only difference between the constructed KeyEvent and its
     * reference is that calling {@link #getTime()} return the copy's
     * construction time.</p>
     *
     * @param event KeyEvent to copy.
     */
    public KeyEvent(KeyEvent event)
    {
        super(event.getType(), event.getAction());
        mKey = event.mKey;
    }

    /**
     * <p>Changes the key and action.</p>
     *
     * <p>Timestamp is not copied but updated to the time of this method's
     * execution.</p>
     *
     * @param key key constant such as {@link #KEY_SPACE}.
     * @param action either {@link Action#PRESS} or {@link Action#RELEASE}.
     */
    public void update(int key, Action action)
    {
        super.update(Type.KEYBOARD, action);
        mKey = key;
    }

    /**
     * <p>Gets the key constant describing the KeyEvent.</p>
     *
     * @return a key constant such as {@link #KEY_A}.
     */
    public final int getKey()
    {
        return mKey;
    }

    /**
     * <p>Checks whether or not the KeyEvent is described by a specified key
     * constant.</p>
     *
     * @param key key constant such as {@link #KEY_H}.
     * @return true if the key describes the KeyEvent.
     * @see #getAction()
     */
    public boolean isKey(int key)
    {
        return mKey == key;
    }

    /**
     * <p>Gets the {@link KeyEvent} constant form of a system digit key
     * constant.</p>
     *
     * @param system system constant.
     * @return KeyEvent constant.
     */
    public static int systemDigitsToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_0:
                return KeyEvent.KEY_0;
            case GLFW.GLFW_KEY_1:
                return KeyEvent.KEY_1;
            case GLFW.GLFW_KEY_2:
                return KeyEvent.KEY_2;
            case GLFW.GLFW_KEY_3:
                return KeyEvent.KEY_3;
            case GLFW.GLFW_KEY_4:
                return KeyEvent.KEY_4;
            case GLFW.GLFW_KEY_5:
                return KeyEvent.KEY_5;
            case GLFW.GLFW_KEY_6:
                return KeyEvent.KEY_6;
            case GLFW.GLFW_KEY_7:
                return KeyEvent.KEY_7;
            case GLFW.GLFW_KEY_8:
                return KeyEvent.KEY_8;
            case GLFW.GLFW_KEY_9:
                return KeyEvent.KEY_9;
            default: return -1;
        }
    }

    /**
     * <p>Gets the {@link KeyEvent} constant form of a system punctuation key
     * constant.</p>
     *
     * @param system system constant.
     * @return KeyEvent constant.
     */
    public static int systemPunctuationToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_GRAVE_ACCENT:
                return KeyEvent.KEY_GRAVE;
            case GLFW.GLFW_KEY_MINUS:
                return KeyEvent.KEY_MINUS;
            case GLFW.GLFW_KEY_EQUAL:
                return KeyEvent.KEY_EQUAL;
            case GLFW.GLFW_KEY_LEFT_BRACKET:
                return KeyEvent.KEY_OPEN_BRACKET;
            case GLFW.GLFW_KEY_RIGHT_BRACKET:
                return KeyEvent.KEY_CLOSE_BRACKET;
            case GLFW.GLFW_KEY_BACKSLASH:
                return KeyEvent.KEY_BACK_SLASH;
            case GLFW.GLFW_KEY_SEMICOLON:
                return KeyEvent.KEY_SEMICOLON;
            case GLFW.GLFW_KEY_APOSTROPHE:
                return KeyEvent.KEY_APOSTROPHE;
            case GLFW.GLFW_KEY_COMMA:
                return KeyEvent.KEY_COMMA;
            case GLFW.GLFW_KEY_PERIOD:
                return KeyEvent.KEY_PERIOD;
            case GLFW.GLFW_KEY_SLASH:
                return KeyEvent.KEY_FORWARD_SLASH;
            default: return -1;
        }
    }

    /**
     * <p>Gets the {@link KeyEvent} constant form of a system auxiliary key
     * constant.</p>
     *
     * @param system system constant.
     * @return KeyEvent constant.
     */
    public static int systemAuxiliaryToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_ESCAPE:
                return KeyEvent.KEY_ESCAPE;
            case GLFW.GLFW_KEY_ENTER:
                return KeyEvent.KEY_ENTER;
            case GLFW.GLFW_KEY_SPACE:
                return KeyEvent.KEY_SPACE;
            case GLFW.GLFW_KEY_BACKSPACE:
                return KeyEvent.KEY_BACKSPACE;

            case GLFW.GLFW_KEY_TAB:
                return KeyEvent.KEY_TAB;
            case GLFW.GLFW_KEY_CAPS_LOCK:
                return KeyEvent.KEY_CAPS_LOCK;

            case GLFW.GLFW_KEY_LEFT_CONTROL:
                return KeyEvent.KEY_LEFT_CTRL;
            case GLFW.GLFW_KEY_LEFT_SHIFT:
                return KeyEvent.KEY_LEFT_SHIFT;
            case GLFW.GLFW_KEY_LEFT_ALT:
                return KeyEvent.KEY_LEFT_ALT;

            case GLFW.GLFW_KEY_RIGHT_CONTROL:
                return KeyEvent.KEY_RIGHT_CTRL;
            case GLFW.GLFW_KEY_RIGHT_SHIFT:
                return KeyEvent.KEY_RIGHT_SHIFT;
            case GLFW.GLFW_KEY_RIGHT_ALT:
                return KeyEvent.KEY_RIGHT_ALT;

            case GLFW.GLFW_KEY_RIGHT:
                return KeyEvent.KEY_RIGHT;
            case GLFW.GLFW_KEY_DOWN:
                return KeyEvent.KEY_DOWN;
            case GLFW.GLFW_KEY_LEFT:
                return KeyEvent.KEY_LEFT;
            case GLFW.GLFW_KEY_UP:
                return KeyEvent.KEY_UP;
            default: return -1;
        }
    }

    /**
     * <p>Gets the {@link KeyEvent} constant form of a system function key
     * constant.</p>
     *
     * @param system system constant.
     * @return KeyEvent constant.
     */
    public static int systemFunctionToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_F1:
                return KeyEvent.KEY_F1;
            case GLFW.GLFW_KEY_F2:
                return KeyEvent.KEY_F2;
            case GLFW.GLFW_KEY_F3:
                return KeyEvent.KEY_F3;
            case GLFW.GLFW_KEY_F4:
                return KeyEvent.KEY_F4;
            case GLFW.GLFW_KEY_F5:
                return KeyEvent.KEY_F5;
            case GLFW.GLFW_KEY_F6:
                return KeyEvent.KEY_F6;
            case GLFW.GLFW_KEY_F7:
                return KeyEvent.KEY_F7;
            case GLFW.GLFW_KEY_F8:
                return KeyEvent.KEY_F8;
            case GLFW.GLFW_KEY_F9:
                return KeyEvent.KEY_F9;
            case GLFW.GLFW_KEY_F10:
                return KeyEvent.KEY_F10;
            case GLFW.GLFW_KEY_F11:
                return KeyEvent.KEY_F11;
            case GLFW.GLFW_KEY_F12:
                return KeyEvent.KEY_F12;
            default: return -1;
        }
    }

    /**
     * <p>Gets the {@link KeyEvent} constant form of a system alphabet key
     * constant.</p>
     *
     * @param system system constant.
     * @return KeyEvent constant.
     */
    public static int systemAlphabetToKey(int system)
    {
        switch (system) {
            case GLFW.GLFW_KEY_A:
                return KeyEvent.KEY_A;
            case GLFW.GLFW_KEY_B:
                return KeyEvent.KEY_B;
            case GLFW.GLFW_KEY_C:
                return KeyEvent.KEY_C;
            case GLFW.GLFW_KEY_D:
                return KeyEvent.KEY_D;
            case GLFW.GLFW_KEY_E:
                return KeyEvent.KEY_E;
            case GLFW.GLFW_KEY_F:
                return KeyEvent.KEY_F;
            case GLFW.GLFW_KEY_G:
                return KeyEvent.KEY_G;
            case GLFW.GLFW_KEY_H:
                return KeyEvent.KEY_H;
            case GLFW.GLFW_KEY_I:
                return KeyEvent.KEY_I;
            case GLFW.GLFW_KEY_J:
                return KeyEvent.KEY_J;
            case GLFW.GLFW_KEY_K:
                return KeyEvent.KEY_K;
            case GLFW.GLFW_KEY_L:
                return KeyEvent.KEY_L;
            case GLFW.GLFW_KEY_M:
                return KeyEvent.KEY_M;
            case GLFW.GLFW_KEY_N:
                return KeyEvent.KEY_N;
            case GLFW.GLFW_KEY_O:
                return KeyEvent.KEY_O;
            case GLFW.GLFW_KEY_P:
                return KeyEvent.KEY_P;
            case GLFW.GLFW_KEY_Q:
                return KeyEvent.KEY_Q;
            case GLFW.GLFW_KEY_R:
                return KeyEvent.KEY_R;
            case GLFW.GLFW_KEY_S:
                return KeyEvent.KEY_S;
            case GLFW.GLFW_KEY_T:
                return KeyEvent.KEY_T;
            case GLFW.GLFW_KEY_U:
                return KeyEvent.KEY_U;
            case GLFW.GLFW_KEY_V:
                return KeyEvent.KEY_V;
            case GLFW.GLFW_KEY_W:
                return KeyEvent.KEY_W;
            case GLFW.GLFW_KEY_X:
                return KeyEvent.KEY_X;
            case GLFW.GLFW_KEY_Y:
                return KeyEvent.KEY_Y;
            case GLFW.GLFW_KEY_Z:
                return KeyEvent.KEY_Z;
            default: return -1;
        }
    }

    @Override
    protected Object clone() throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException("Use the copy constructor " +
                "instead");
    }

    @Override
    public String toString()
    {
        // Identify String key
        String key = digitsToString(mKey);
        key = (key == null) ? punctuationToString(mKey) : key;
        key = (key == null) ? auxiliaryToString(mKey) : key;
        key = (key == null) ? functionToString(mKey) : key;
        key = (key == null) ? alphabetToString(mKey) : key;

        return "[" + Type.KEYBOARD.name() + "," + getAction().name()+ ","+ key
                + "]";
    }

    /**
     * <p>Gets the String equivalent of a given digit key constant.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unsupported.
     */
    private String digitsToString(int key)
    {
        switch (key) {
            case KEY_0:
                return "0";
            case KEY_1:
                return "1";
            case KEY_2:
                return "2";
            case KEY_3:
                return "3";
            case KEY_4:
                return "4";
            case KEY_5:
                return "5";
            case KEY_6:
                return "6";
            case KEY_7:
                return "7";
            case KEY_8:
                return "8";
            case KEY_9:
                return "9";
            default: return null;
        }
    }

    /**
     * <p>Gets the String equivalent of a given punctuation key constant.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unsupported.
     */
    private String punctuationToString(int key)
    {
        switch (key) {
            case KEY_GRAVE:
                return "`";
            case KEY_MINUS:
                return "-";
            case KEY_EQUAL:
                return "=";
            case KEY_OPEN_BRACKET:
                return "[";
            case KEY_CLOSE_BRACKET:
                return "]";
            case KEY_BACK_SLASH:
                return "\\";
            case KEY_SEMICOLON:
                return ";";
            case KEY_APOSTROPHE:
                return "'";
            case KEY_COMMA:
                return ",";
            case KEY_PERIOD:
                return ".";
            case KEY_FORWARD_SLASH:
                return "/";
            default: return null;
        }
    }

    /**
     * <p>Gets the String equivalent of a given auxiliary key constant.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unsupported.
     */
    private String auxiliaryToString(int key)
    {
        switch (key) {
            case KeyEvent.KEY_ESCAPE:
                return "esc";
            case KeyEvent.KEY_ENTER:
                return "enter";
            case KeyEvent.KEY_SPACE:
                return "space";
            case KeyEvent.KEY_BACKSPACE:
                return "backspace";
            case KeyEvent.KEY_TAB:
                return "tab";
            case KeyEvent.KEY_CAPS_LOCK:
                return "capslock";
            case KeyEvent.KEY_LEFT_CTRL:
                return "left_ctrl";
            case KeyEvent.KEY_LEFT_SHIFT:
                return "left_shift";
            case KeyEvent.KEY_LEFT_ALT:
                return "left_alt";
            case KeyEvent.KEY_RIGHT_CTRL:
                return "right_ctrl";
            case KeyEvent.KEY_RIGHT_SHIFT:
                return "right_shift";
            case KeyEvent.KEY_RIGHT_ALT:
                return "right_alt";
            case KeyEvent.KEY_RIGHT:
                return "right";
            case KeyEvent.KEY_DOWN:
                return "down";
            case KeyEvent.KEY_LEFT:
                return "left";
            case KeyEvent.KEY_UP:
                return "up";
            default: return null;
        }
    }

    /**
     * <p>Gets the String equivalent of a given function key constant.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unsupported.
     */
    private String functionToString(int key)
    {
        switch (key) {
            case KeyEvent.KEY_F1:
                return "F1";
            case KeyEvent.KEY_F2:
                return "F2";
            case KeyEvent.KEY_F3:
                return "F3";
            case KeyEvent.KEY_F4:
                return "F4";
            case KeyEvent.KEY_F5:
                return "F5";
            case KeyEvent.KEY_F6:
                return "F6";
            case KeyEvent.KEY_F7:
                return "F7";
            case KeyEvent.KEY_F8:
                return "F8";
            case KeyEvent.KEY_F9:
                return "F9";
            case KeyEvent.KEY_F10:
                return "F10";
            case KeyEvent.KEY_F11:
                return "F11";
            case KeyEvent.KEY_F12:
                return "F12";
            default: return null;
        }
    }

    /**
     * <p>Gets the String equivalent of a given alphabet key constant.</p>
     *
     * @param key key.
     * @return String form of key, or null if the key is unsupported.
     */
    private String alphabetToString(int key)
    {
        switch (key) {
            case KEY_A:
                return "A";
            case KEY_B:
                return "B";
            case KEY_C:
                return "C";
            case KEY_D:
                return "D";
            case KEY_E:
                return "E";
            case KEY_F:
                return "F";
            case KEY_G:
                return "G";
            case KEY_H:
                return "H";
            case KEY_I:
                return "I";
            case KEY_J:
                return "J";
            case KEY_K:
                return "K";
            case KEY_L:
                return "L";
            case KEY_M:
                return "M";
            case KEY_N:
                return "N";
            case KEY_O:
                return "O";
            case KEY_P:
                return "P";
            case KEY_Q:
                return "Q";
            case KEY_R:
                return "R";
            case KEY_S:
                return "S";
            case KEY_T:
                return "T";
            case KEY_U:
                return "U";
            case KEY_V:
                return "V";
            case KEY_W:
                return "W";
            case KEY_X:
                return "X";
            case KEY_Y:
                return "Y";
            case KEY_Z:
                return "Z";
            default: return null;
        }
    }
}
